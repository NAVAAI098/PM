-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
repeat task.wait(1) until game:IsLoaded()

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Player
local LocalPlayer = Players.LocalPlayer
repeat task.wait(0.5) until LocalPlayer and LocalPlayer.Name ~= nil
local playerName = LocalPlayer.Name

-- ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ PlayerStats ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á
repeat task.wait(1)
until Workspace:FindFirstChild("PlayerStats")
   and Workspace.PlayerStats:FindFirstChild(playerName)

local playerStats = Workspace.PlayerStats[playerName]

-- ‚úÖ ‡∏£‡∏≠ ReplicatedStorage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
repeat task.wait(1)
until ReplicatedStorage:FindFirstChild("packages")
   and ReplicatedStorage.packages:FindFirstChild("Net")
   and ReplicatedStorage.packages.Net:FindFirstChild("RE/SpearFishing/Minigame")

local RemoteEvent = ReplicatedStorage.packages.Net["RE/SpearFishing/Minigame"]

-- ‚úÖ ‡∏£‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Spearfishing Water ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô workspace
repeat task.wait(1)
until Workspace:FindFirstChild("Spearfishing Water")

local SpearfishingFolder = Workspace["Spearfishing Water"]

print("‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

-- üß† ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ Hop ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô session ‡∏ô‡∏µ‡πâ
_G.HoppedServers = _G.HoppedServers or {}

local function hopServer()
	local success, result = pcall(function()
		return HttpService:JSONDecode(
			game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")
		)
	end)

	if not success or not result or not result.data then
		warn("[ServerHop] ‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		return false
	end

	local availableServers = {}

	for _, server in ipairs(result.data) do
		if type(server) == "table"
			and server.id ~= game.JobId
			and server.playing < server.maxPlayers
			and not table.find(_G.HoppedServers, server.id)
		then
			table.insert(availableServers, server.id)
		end
	end

	local playerCount = #Players:GetPlayers()

	if playerCount > 10 and #availableServers > 0 then
		local targetServer = availableServers[math.random(1, #availableServers)]
		print("[ServerHop] üåç ‡∏Ñ‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 -> Hop ‡πÑ‡∏õ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÉ‡∏´‡∏°‡πà:", targetServer)
		table.insert(_G.HoppedServers, targetServer)
		TeleportService:TeleportToPlaceInstance(game.PlaceId, targetServer)
		return true
	else
		if playerCount <= 10 then
			print("[ServerHop] üë• ‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 10, ‡πÑ‡∏°‡πà Hop")
		else
			print("[ServerHop] ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ Hop ‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á)")
		end
	end

	return false
end

-- üîÅ ‡∏ß‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ hop ‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
task.spawn(function()
	while task.wait(10) do
		local ok = hopServer()
		if ok then
			break -- ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ hop ‡πÑ‡∏î‡πâ
		end
	end
end)


-- üß© ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©
A = require(game:GetService("ReplicatedStorage").client.legacyControllers.DataController)
B = require(game:GetService("ReplicatedStorage").shared.modules.library.fish)
backpackUI = require(game:GetService("ReplicatedStorage").client.modules.ui.Backpack)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏±‡∏ô‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Idle (AFK)
local vu = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

player.Idled:Connect(function()
    vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

print("‚úÖ Anti-AFK Enabled (‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏•‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ AFK)")

local function interact(path)
	if path then
		GuiService.SelectedObject = path
		task.wait(0.05)
		VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
		task.wait(0.05)
		VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
		task.wait(0.05)
		GuiService.SelectedObject = nil
	end
end


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remote = ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RE/Settings/Update")

-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ setting ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î
local settingsToEnable = {
	"disableCamShake",
	"willautosell_apex",
	"willautosell_secret",
	"willautosell_mythical",
	"willautosell_legendary",
	"willautosell_gemstone",
	"willautosell_exotic",
	"willautosell_event"
}

-- ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å setting
for _, settingName in ipairs(settingsToEnable) do
	Remote:FireServer(settingName, true)
	task.wait(0.5) -- ‡∏Å‡∏±‡∏ô server overload ‡∏´‡∏£‡∏∑‡∏≠ anti-spam
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remote = ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RE/Settings/Update")

-- üîï ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
local settingsToDisable = {
    "announcestop",
    "announcesbottom",
    "chatothers",
    "chatcatch",
    "chatenchant",
    "chatevent"
}

for _, settingName in ipairs(settingsToDisable) do
    Remote:FireServer(settingName, false)
    task.wait(0.5) -- ‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏±‡∏ô spam
end

lib = require(game:GetService("ReplicatedStorage").shared.modules.library)
for i,v in pairs(lib.rods) do
    pcall(function ()
        v.InstantCatch = true
    end)
end
task.spawn(function()
    while task.wait(3) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.loading.Enabled then
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, true, nil, 1)
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, false, nil, 1)
                interact(game:GetService("Players").LocalPlayer.PlayerGui.loading.loading.skip)
            end
        end)
    end
end)

local function getNumericValue()
    local value = tostring(game:GetService("Players").LocalPlayer.leaderstats["C$"].Value)
    local cleanValue = value:gsub(",", ""):gsub("C%$", "")
    return tonumber(cleanValue)
end

_G.Autofarm = true
_G.Equip = true
_G.All = true
_G.Original = true
_G.Great =true
_G.Autosell = true

-- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å
_G.Config = {
    RodPriority = {
        "Great Rod of Oscar",
        "Original No-Life Rod"
    },

    RodUpgradeList = {
        { name = "Original No-Life Rod", price = 1 },
        { name = "Great Rod of Oscar", price = 5000000 }
    }
}

-- ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
_G.Player = game.Players.LocalPlayer
_G.PlayerName = _G.Player.Name
_G.PlayerStats = workspace:WaitForChild("PlayerStats")[_G.PlayerName].T[_G.PlayerName]

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rod ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà
function updateCurrentRod()
    for _, rodName in ipairs(_G.Config.RodPriority) do
        if _G.PlayerStats.Rods:FindFirstChild(rodName) then
            _G.Item = rodName
            return
        end
    end
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ Rod ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
function tryBuyRods()
    for _, rodData in ipairs(_G.Config.RodUpgradeList) do
        local rod = _G.PlayerStats.Rods:FindFirstChild(rodData.name)
        if not rod and getNumericValue() > rodData.price then
            local args = { rodData.name, "Rod", [4] = 1 }
            game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("purchase"):FireServer(unpack(args))
        end
    end
end

-- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
task.spawn(function()
    while task.wait(1) do
        pcall(function()
            updateCurrentRod()
            tryBuyRods()
        end)
    end
end)

-- ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ Luck
task.spawn(function()
    while task.wait(1) do
        if _G.All then
            pcall(function()
                local player = game:GetService("Players").LocalPlayer
                local statuses = player.PlayerGui.hud.safezone.statuses
                local statusLuck = statuses:FindFirstChild("status_luck")

                -- ‡∏ñ‡πâ‡∏≤ luck ‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
                if ((not statusLuck) or (not statusLuck.Visible)) and getNumericValue() > 5000 then
                    -- üïí ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô HUD ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î
                    task.wait(2)
                    statusLuck = statuses:FindFirstChild("status_luck")
                    if (not statusLuck) or (not statusLuck.Visible) then
                        _G.Autofarm = false
                        _G.Equip = false
                        _G.Autosell = false
                        local hrp = player.Character:WaitForChild("HumanoidRootPart")
                        hrp.CFrame = CFrame.new(-1215, 190, -1040)
                        for i,v in pairs(workspace:WaitForChild("world"):WaitForChild("npcs"):GetChildren()) do
                            if v.Name == "Merlin" then
                                local args = {
                                    {
                                        voice = 11,
                                        idle = v:WaitForChild("description"):WaitForChild("idle"),
                                        npc = v
                                    }
                                }
                                for ii,vv in pairs(v:WaitForChild("Merlin"):GetChildren()) do
                                    if vv.Name == "luck" then
                                        task.spawn(function()
                                            for i = 1, 10 do
                                                local a = vv:InvokeServer(unpack(args))
                                                print("‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà", i, "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:", a)
                                                task.wait(0.1)
                                            end
                                        end)
                                    end
                                end
                                break
                            end
                        end
                    end
                else
                    task.wait(10)
                    _G.Autofarm = true
                    _G.Equip = true
                    _G.All = true
                    _G.Autosell = true
                end
            end)
        end
    end
end)

-- üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô Backpack ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
function EquipTool(toolName)
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local tool = player.Backpack:FindFirstChild(toolName)

    if not humanoid then
        warn("[EquipTool] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Humanoid")
        return false
    end

    if not tool then
        warn("[EquipTool] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ä‡∏∑‡πà‡∏≠ '" .. toolName .. "' ‡πÉ‡∏ô Backpack")
        return false
    end

    -- ‚úÖ ‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    humanoid:EquipTool(tool)

    -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Equip ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    task.wait(0.2)
    if char:FindFirstChild(toolName) then
        print("[EquipTool] ‚úÖ ‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:", toolName)
        return true
    else
        warn("[EquipTool] ‚ö†Ô∏è ‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á:", toolName)
        return false
    end
end


spawn(function()
    while task.wait(1) do
        pcall(function()
            if _G.Equip then
				if not _G.Item and _G.Config.RodPriority then
					for _, rodName in ipairs(_G.Config.RodPriority) do
						if game:GetService("Players").LocalPlayer.Character:FindFirstChild(rodName) then
							_G.Item = rodName
							break
						end
					end
				end
                if game.Workspace.PlayerStats[game.Players.LocalPlayer.Name].T[game.Players.LocalPlayer.Name].Rods:FindFirstChild(_G.Item) and not game.Players.LocalPlayer.Backpack:FindFirstChild(_G.Item) then
                    game:GetService("ReplicatedStorage")
                        :WaitForChild("packages")
                        :WaitForChild("Net")
                        :WaitForChild("RF/Rod/Equip")
                        :InvokeServer(_G.Item)
                elseif game.Players.LocalPlayer.Backpack:FindFirstChild(_G.Item) then
                    EquipTool(_G.Item)
                end
            end
        end)
    end
end)

spawn(function()
	while task.wait(1) do
		pcall(function()
			if _G.Autosell then
				backpack = game:GetService("Players").LocalPlayer.Backpack
				if #backpack:GetChildren() > 60 then
					_G.Autofarm = false
                    _G.Equip = false
                    _G.All = false
					character = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
					hrp = character:WaitForChild("HumanoidRootPart")
					hrp.CFrame = CFrame.new(-2895, 136, -2184)

					task.wait(1)

					for i,v in pairs(A.fetch("Inventory")) do
						pcall(function()
							if B[v.name].Rarity and B[v.name].Rarity == "Special" then
								print("[üé£ ‡∏û‡∏ö‡∏õ‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©]:", v.name)
								game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2742, 160, -2075)
								backpackUI.handleInput(i, "equip")
								task.wait(0.1)
								args = {
									{
										voice = 12,
										idle = workspace.world.map["Lost Jungle"]["Merrick Merchant"].description.idle,
										npc = workspace.world.map["Lost Jungle"]["Merrick Merchant"]
									}
								}
								game:GetService("ReplicatedStorage").events.Sell:InvokeServer(unpack(args))
							end
						end)
					end
					args = {
						{
							voice = 12,
							idle = workspace.world.map["Lost Jungle"]["Merrick Merchant"].description.idle,
							npc = workspace.world.map["Lost Jungle"]["Merrick Merchant"]
						}
					}
					game:GetService("ReplicatedStorage").events.SellAll:InvokeServer(unpack(args))

					task.wait(3)
				elseif #backpack:GetChildren() < 60 then
					task.wait(10)
					_G.Autofarm = true
                    _G.Equip = true
                    _G.All = true
				end
			end
		end)
	end
end)

PlayerName = game:GetService("Players").LocalPlayer.Name
task.spawn(function()
    while task.wait(0.5) do
        if _G.Autofarm then
            pcall(function()
                if game.Players.LocalPlayer.Character:FindFirstChild("Original No-Life Rod") then
                    local rod = game.Players.LocalPlayer.Character:FindFirstChild("Original No-Life Rod")
                    if not rod:FindFirstChild("bobber") and workspace[PlayerName]["Original No-Life Rod"].values.bobberzone.Value == "nil" then
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(603.941162, 160.999969, -1905.35742, -0.997982264, -9.21458376e-09, 0.0634933785, -3.99797173e-09, 1, 8.22869808e-08, -0.0634933785, 8.18671069e-08, -0.997982264)
                        rod.events.castAsync:InvokeServer(100, 1)
                    end
                    task.wait(0.1)
                    if rod:FindFirstChild("bobber") and workspace[PlayerName]["Original No-Life Rod"].values.bobberzone.Value ~= "Castaway Cliffs" then
                        task.wait(3)
                        game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, true, nil, 1)
                        game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, false, nil, 1)
                    end
                end
                if game.Players.LocalPlayer.Character:FindFirstChild("Great Rod of Oscar") then
                    local rod = game.Players.LocalPlayer.Character:FindFirstChild("Great Rod of Oscard")
                    if not rod:FindFirstChild("bobber") and workspace[PlayerName]["Great Rod of Oscar"].values.bobberzone.Value == "nil" then
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1375.31616, -603.46405, 2337.57251, 0.942536652, 5.14034149e-08, -0.33410278, -6.6218206e-08, 1, -3.29529435e-08, 0.33410278, 5.31830437e-08, 0.942536652)
                        rod.events.castAsync:InvokeServer(100, 1)
                    end
                    task.wait(0.1)
                    if rod:FindFirstChild("bobber") and workspace[PlayerName]["Great Rod of Oscar"].values.bobberzone.Value ~= "Castaway Cliffs" then
                        task.wait(3)
                        game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, true, nil, 1)
                        game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, false, nil, 1)
                    end
                end
            end)
        end
    end
end)

task.spawn(function()
    while task.wait(0.1) do
        if _G.All then
            pcall(function()
                if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("reel") then
                    game:GetService("ReplicatedStorage").events.reelfinished:FireServer(100, true)
                end
            end)
        end
    end
end)


local player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

task.spawn(function()
    while true do
        RunService.Heartbeat:Wait()
        -- ‡∏´‡∏≤ shakeui
        local gui = PlayerGui:FindFirstChild("shakeui")
        if not gui then continue end

        -- ‡∏´‡∏≤ safezone > button > shake (RemoteEvent)
        local sz   = gui:FindFirstChild("safezone")
        local btn  = sz and sz:FindFirstChild("button")
        local shake = btn and btn:FindFirstChild("shake")
        if cfg and cfg['Visible Shake'] then
            local Connect = sz:FindFirstChild("connect")
            if Connect then Connect.Enabled = false end
            sz.Visible = false
        else
            pcall(function()
                local btn = sz:FindFirstChild("button")
                local t = btn and btn:FindFirstChild("title")
                if t and t:IsA("TextLabel") then
                    t.Text = "‡∏Ñ‡∏ß‡∏¢"
                end
            end)
        end

        if shake and shake:IsA("RemoteEvent") then
            pcall(function()
                shake:FireServer() 
            end)
        end
    end
end)

local player = game:GetService("Players").LocalPlayer
local playerName = player.Name
local playerStats = workspace:WaitForChild("PlayerStats")
local stats = playerStats:WaitForChild(playerName)
local rods = stats.T[playerName]:WaitForChild("Rods")
local function getCash()
	return tonumber(stats.T[playerName].Stats.coins.Value)
end

local function buyRelic()
    local merlin = workspace.world.npcs.Merlin.Merlin
    local buy5Relics = merlin:FindFirstChild("buy10Relics")

    if buy5Relics then
        buy5Relics:InvokeServer({
            {
                voice = 11,
                idle = workspace.world.npcs.Merlin.description.idle,
                npc = workspace.world.npcs.Merlin
            }
        })
    end
end

task.spawn(function()
	while task.wait(1) do
        if _G.All then
            pcall(function()
                local cash = getCash()
                local rod = rods:FindFirstChild("Great Rod of Oscar")
                if rod and cash > 110000 and rod.Value ~= "Clever" and game:GetService("ReplicatedStorage").world.cycle.Value == "Night" then
                    if not player.Backpack:FindFirstChild("Enchant Relic") and not player.Character:FindFirstChild("Enchant Relic") then
                        _G.Autofarm = false
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(-1215, 195, -1040)
                        buyRelic()
                    end
                else
                    wait(15)
                    _G.Autofarm = true
                end
            end)
        end
	end
end)

task.spawn(function()
	while task.wait(1) do
        if _G.All then
            pcall(function()
                local cash = getCash()
                local rod = rods:FindFirstChild("Original No-Life Rod")
                if rod and cash > 110000 and rod.Value ~= "Chaotic" and game:GetService("ReplicatedStorage").world.cycle.Value == "Night" then
                    if not player.Backpack:FindFirstChild("Enchant Relic") and not player.Character:FindFirstChild("Enchant Relic") then
                        _G.Autofarm = false
                        player.Character.HumanoidRootPart.CFrame = CFrame.new(-1215, 195, -1040)
                        buyRelic()
                    end
                else
                    wait(15)
                    _G.Autofarm = true
                end
            end)
        end
	end
end)

task.spawn(function()
	while task.wait(1) do
        if _G.Great then
            pcall(function()
                if rods:FindFirstChild("Great Rod of Oscar").Value ~= "Clever"
        and game:GetService("ReplicatedStorage").world.cycle.Value == "Night"
        and (game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Enchant Relic")
        or workspace:FindFirstChild(game:GetService("Players").LocalPlayer.Name):FindFirstChild("Enchant Relic")) then
                    _G.Autofarm = false
                    _G.Equip = false
                    _G.All = false
                    _G.Autosell = false
                    _G.Original = false
                    if not game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                        local vim = game:GetService("VirtualInputManager")
                        vim:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                        task.wait(0.05)
                        vim:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                        local player = game.Players.LocalPlayer
                        local char = player.Character or player.CharacterAdded:Wait()
                        local humanoid = char:FindFirstChildOfClass("Humanoid")
                        local tool = player.Backpack:FindFirstChild("Enchant Relic")

                        if tool and humanoid then
                            humanoid:EquipTool(tool)
                        end
                        task.wait(0.3)
                    elseif game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                    interact(game:GetService("Players").LocalPlayer.PlayerGui.over.prompt.confirm)
                    end
                else
                    wait(10)
                    _G.Autofarm = true
                    _G.Equip = true
                    _G.All = true
                    _G.Autosell = true
                    _G.Original = true
                end
            end)
        end
    end
end)



task.spawn(function()
	while task.wait(1) do
        if _G.Original then
            pcall(function()
                if rods:FindFirstChild("Original No-Life Rod").Value ~= "Chaotic"
        and game:GetService("ReplicatedStorage").world.cycle.Value == "Night"
        and (game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Enchant Relic")
        or workspace:FindFirstChild(game:GetService("Players").LocalPlayer.Name):FindFirstChild("Enchant Relic")) then
                    _G.Autofarm = false
                    _G.Equip = false
                    _G.All = false
                    _G.Autosell = false
                    _G.Great = false
                    if not game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                        local vim = game:GetService("VirtualInputManager")
                        vim:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                        task.wait(0.05)
                        vim:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                        local player = game.Players.LocalPlayer
                        local char = player.Character or player.CharacterAdded:Wait()
                        local humanoid = char:FindFirstChildOfClass("Humanoid")
                        local tool = player.Backpack:FindFirstChild("Enchant Relic")

                        if tool and humanoid then
                            humanoid:EquipTool(tool)
                        end
                        task.wait(0.3)
                    elseif game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                    interact(game:GetService("Players").LocalPlayer.PlayerGui.over.prompt.confirm)
                    end
                else
                    wait(10)
                    _G.Autofarm = true
                    _G.Equip = true
                    _G.All = true
                    _G.Autosell = true
                    _G.Great =true
                end
            end)
        end
    end
end)

local Players = game:GetService("Players")
local CollectionService = game:GetService("CollectionService")
local LocalPlayer = Players.LocalPlayer

local function getBobber()
    local char = LocalPlayer.Character
    if not char then return nil end
    local tool = char:FindFirstChildOfClass("Tool")
    if not tool then return nil end
    local b = tool:FindFirstChild("bobber")
    if b and b:IsA("BasePart") then
        return b
    end
    return nil
end

local function setBobberPosition(bobber: BasePart, pos: Vector3)
    -- ‡∏´‡∏¢‡∏∏‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á
    pcall(function()
        bobber.AssemblyLinearVelocity = Vector3.zero
        bobber.AssemblyAngularVelocity = Vector3.zero
    end)
    bobber.CFrame = CFrame.new(pos)
end

local function InstantBobNow()
    local bobber = getBobber()
    if not bobber then
        return false
    end
    local waterParts = CollectionService:GetTagged("PartWater")
    if #waterParts > 0 then
        local paramsWater = RaycastParams.new()
        paramsWater.FilterType = Enum.RaycastFilterType.Include
        paramsWater.FilterDescendantsInstances = waterParts
        local hitWater = workspace:Raycast(bobber.Position, -Vector3.yAxis * 200, paramsWater)
        if hitWater and hitWater.Instance then
            local target = hitWater.Position - Vector3.new(0, 3, 0)
            setBobberPosition(bobber, target)
            return true
        end
    end

    local paramsTerrain = RaycastParams.new()
    paramsTerrain.FilterType = Enum.RaycastFilterType.Include
    paramsTerrain.FilterDescendantsInstances = { workspace.Terrain }

    local hitTerrain = workspace:Raycast(bobber.Position, -Vector3.yAxis * 200, paramsTerrain)
    if hitTerrain and hitTerrain.Instance and hitTerrain.Instance:IsA("Terrain") then
        setBobberPosition(bobber, hitTerrain.Position)
        return true
    end
    return false
end

task.spawn(function()
    while task.wait() do
        InstantBobNow()
    end
end)
