-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
repeat task.wait(1) until game:IsLoaded()

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")

-- ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Player
local LocalPlayer = Players.LocalPlayer
repeat task.wait(0.5) until LocalPlayer and LocalPlayer.Name ~= nil
local playerName = LocalPlayer.Name

-- ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ PlayerStats ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á
repeat task.wait(1)
until Workspace:FindFirstChild("PlayerStats")
   and Workspace.PlayerStats:FindFirstChild(playerName)

local playerStats = Workspace.PlayerStats[playerName]

-- ‚úÖ ‡∏£‡∏≠ ReplicatedStorage ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
repeat task.wait(1)
until ReplicatedStorage:FindFirstChild("packages")
   and ReplicatedStorage.packages:FindFirstChild("Net")
   and ReplicatedStorage.packages.Net:FindFirstChild("RE/SpearFishing/Minigame")

local RemoteEvent = ReplicatedStorage.packages.Net["RE/SpearFishing/Minigame"]

-- ‚úÖ ‡∏£‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Spearfishing Water ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô workspace
repeat task.wait(1)
until Workspace:FindFirstChild("Spearfishing Water")

local SpearfishingFolder = Workspace["Spearfishing Water"]

print("‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

-- üß© ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©
A = require(game:GetService("ReplicatedStorage").client.legacyControllers.DataController)
B = require(game:GetService("ReplicatedStorage").shared.modules.library.fish)
backpackUI = require(game:GetService("ReplicatedStorage").client.modules.ui.Backpack)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏±‡∏ô‡∏Ñ‡∏¥‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö Idle (AFK)
local vu = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

player.Idled:Connect(function()
    vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

print("‚úÖ Anti-AFK Enabled (‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏•‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠ AFK)")

local function interact(path)
	if path then
		GuiService.SelectedObject = path
		task.wait(0.05)
		VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
		task.wait(0.05)
		VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
		task.wait(0.05)
		GuiService.SelectedObject = nil
	end
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remote = ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RE/Settings/Update")

-- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ setting ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î
local settingsToEnable = {
	"disableCamShake",
	"willautosell_apex",
	"willautosell_secret",
	"willautosell_mythical",
	"willautosell_legendary",
	"willautosell_gemstone",
	"willautosell_exotic",
	"willautosell_event"
}

-- ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏∏‡∏Å setting
for _, settingName in ipairs(settingsToEnable) do
	Remote:FireServer(settingName, true)
	task.wait(0.5) -- ‡∏Å‡∏±‡∏ô server overload ‡∏´‡∏£‡∏∑‡∏≠ anti-spam
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remote = ReplicatedStorage:WaitForChild("packages"):WaitForChild("Net"):WaitForChild("RE/Settings/Update")

-- üîï ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
local settingsToDisable = {
    "announcestop",
    "announcesbottom",
    "chatothers",
    "chatcatch",
    "chatenchant",
    "chatevent"
}

for _, settingName in ipairs(settingsToDisable) do
    Remote:FireServer(settingName, false)
    task.wait(0.5) -- ‡πÄ‡∏ß‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏±‡∏ô spam
end

lib = require(game:GetService("ReplicatedStorage").shared.modules.library)
for i,v in pairs(lib.rods) do
    pcall(function ()
        v.InstantCatch = true
    end)
end
task.spawn(function()
    while task.wait(3) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui.loading.Enabled then
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, true, nil, 1)
                game:GetService("VirtualInputManager"):SendMouseButtonEvent(10, 100, 0, false, nil, 1)
                interact(game:GetService("Players").LocalPlayer.PlayerGui.loading.loading.skip)
            end
        end)
    end
end)


-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏õ‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å WaterPart
local function getAllFishUIDs()
    local uids = {}

    for _, waterPart in ipairs(SpearfishingFolder:GetChildren()) do
        local zoneFish = waterPart:FindFirstChild("ZoneFish")
        if zoneFish then
            for _, fish in ipairs(zoneFish:GetChildren()) do
                local uid = fish:GetAttribute("UID")
                if uid and not table.find(uids, uid) then
                    table.insert(uids, uid)
                end
            end
        end
    end

    return uids
end

-- ‚ö° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏õ‡∏•‡∏≤‡πÄ‡∏£‡πá‡∏ß
local function catchAllFish()
    local fishUIDs = getAllFishUIDs()
    if #fishUIDs == 0 then
        warn("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏•‡∏≤‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏ô‡∏µ‡πâ")
        return
    end

    --print("üéØ ‡∏û‡∏ö‡∏õ‡∏•‡∏≤", #fishUIDs, "‡∏ï‡∏±‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏ö...")

    for _, uid in ipairs(fishUIDs) do
        task.spawn(function()
            pcall(function()
                -- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏¢‡∏¥‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó‡πÅ‡∏£‡∏Å
                RemoteEvent:FireServer(uid)
                -- ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
                task.wait(0.05)
                -- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏¢‡∏¥‡∏á‡∏£‡∏µ‡πÇ‡∏°‡∏ó‡∏™‡∏≠‡∏á
                RemoteEvent:FireServer(uid, true)
                --print("‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤ UID:", uid)
            end)
        end)
        task.wait(0.05) -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Flood
    end
end

local NoclipNotDup = tostring(math.random(10000000,99999999))
local shp = sethiddenproperty or set_hidden_property or set_hidden_prop or sethiddenprop
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏õ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
function _G.TeleportTo(pos)
	local char = LocalPlayer.Character
	if char and char:FindFirstChild("HumanoidRootPart") then
		char:MoveTo(pos) -- ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ CFrame.new(pos.X,pos.Y,pos.Z)
	end
end

-- ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö NoClip ‡∏´‡∏•‡∏±‡∏Å
spawn(function()
	RunService.Stepped:Connect(function()
		local char = LocalPlayer.Character
		if not char or not char:FindFirstChild("Humanoid") or not char.PrimaryPart then return end
		
		local HumNoid = char.Humanoid
		local HumNoidRoot = char.PrimaryPart

		if _G.NoClip then
			if HumNoid:GetState() == Enum.HumanoidStateType.Seated or HumNoid.Health <= 0 then
				HumNoid.Jump = true
				HumNoid.Sit = false
				if HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup) then
					HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup):Destroy()
				end
			end

			if HumNoid.Sit == false and HumNoid.Health > 0 then
				for _, v in pairs(char:GetDescendants()) do
					if v:IsA("BasePart") then
						v.CanCollide = false
					end
				end
			else
				HumNoid.Sit = false
			end

			HumNoid.PlatformStand = true
			if not HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup) and HumNoid.Sit == false then
				local bv = Instance.new("BodyVelocity")
				bv.Parent = HumNoidRoot
				bv.Name = "NoClip"..NoclipNotDup
				bv.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
				bv.Velocity = Vector3.new(0, 0, 0)
			end
		else
			HumNoid.PlatformStand = false
			if HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup) then
				HumNoidRoot:FindFirstChild("NoClip"..NoclipNotDup):Destroy()
			end
		end
	end)
end)

local function getNumericValue()
    local value = tostring(game:GetService("Players").LocalPlayer.leaderstats["C$"].Value)
    local cleanValue = value:gsub(",", ""):gsub("C%$", "")
    return tonumber(cleanValue)
end

-- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å
_G.Config = {
    Autofarm = true,
    Autosell = true,
    Equip = true,
    AutofarmV2 = true,

    RodPriority = {
        "Great Rod of Oscar",
        "Aurora Rod"
    },

    RodUpgradeList = {
        { name = "Aurora Rod", price = 90000 },
        { name = "Great Rod of Oscar", price = 5000000 }
    }
}

-- ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
_G.Player = game.Players.LocalPlayer
_G.PlayerName = _G.Player.Name
_G.PlayerStats = workspace:WaitForChild("PlayerStats")[_G.PlayerName].T[_G.PlayerName]

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Rod ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà
function updateCurrentRod()
    for _, rodName in ipairs(_G.Config.RodPriority) do
        if _G.PlayerStats.Rods:FindFirstChild(rodName) then
            _G.Item = rodName
            return
        end
    end
end

-- ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡∏∑‡πâ‡∏≠ Rod ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
function tryBuyRods()
    for _, rodData in ipairs(_G.Config.RodUpgradeList) do
        local rod = _G.PlayerStats.Rods:FindFirstChild(rodData.name)
        if not rod and getNumericValue() > rodData.price then
            local args = { rodData.name, "Rod", [4] = 1 }
            game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("purchase"):FireServer(unpack(args))
        end
    end
end

-- ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
task.spawn(function()
    while task.wait(1) do
        pcall(function()
            updateCurrentRod()
            tryBuyRods()
        end)
    end
end)

local function getNumericValue()
    local value = tostring(game:GetService("Players").LocalPlayer.leaderstats["C$"].Value)
    local cleanValue = value:gsub(",", ""):gsub("C%$", "")
    return tonumber(cleanValue)
end

-- ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ Luck
task.spawn(function()
    while task.wait(1) do
        pcall(function()
            local player = game:GetService("Players").LocalPlayer
            local statuses = player.PlayerGui.hud.safezone.statuses
            local statusLuck = statuses:FindFirstChild("status_luck")

            -- ‡∏ñ‡πâ‡∏≤ luck ‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà
            if ((not statusLuck) or (not statusLuck.Visible)) and getNumericValue() > 5000 then
                -- üïí ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô HUD ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î
                task.wait(2)
                statusLuck = statuses:FindFirstChild("status_luck")
                if (not statusLuck) or (not statusLuck.Visible) then
                    _G.Config.Autofarm = false
                    local hrp = player.Character:WaitForChild("HumanoidRootPart")
                    hrp.CFrame = CFrame.new(-1215, 190, -1040)
                    for i,v in pairs(workspace:WaitForChild("world"):WaitForChild("npcs"):GetChildren()) do
                        if v.Name == "Merlin" then
                            local args = {
                                {
                                    voice = 11,
                                    idle = v:WaitForChild("description"):WaitForChild("idle"),
                                    npc = v
                                }
                            }
                            for ii,vv in pairs(v:WaitForChild("Merlin"):GetChildren()) do
                                if vv.Name == "luck" then
                                    task.spawn(function()
                                        for i = 1, 10 do
                                            local a = vv:InvokeServer(unpack(args))
                                            print("‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà", i, "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:", a)
                                            task.wait(0.1)
                                        end
                                    end)
                                end
                            end
                            break
                        end
                    end
                end
            else
                task.wait(10)
                _G.Config.Autofarm = true
            end
        end)
    end
end)


spawn(function()
    while task.wait(0.1) do
        pcall(function()
            if _G.Config.AutofarmV2 then
                local playerStats = workspace:WaitForChild("PlayerStats")
                local stats = playerStats[playerName]
                if not stats then return end

                local rods = stats.T[playerName]:WaitForChild("Rods")
                local spears = stats.T[playerName]:WaitForChild("Spears")

                -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á Rod ‡πÅ‡∏•‡∏∞ Spear (‡∏´‡∏£‡∏∑‡∏≠ Spear ‡∏¢‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô)
                if not rods:FindFirstChild("Aurora Rod") and spears:FindFirstChild("Flimsy Spear") then
                    _G.Config.Autofarm = false
                    local hrp = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart")
                    hrp.CFrame = CFrame.new(-2895, 136, -2184)
                    catchAllFish()
                elseif not spears:FindFirstChild("Flimsy Spear") then
                    -- ‡∏ã‡∏∑‡πâ‡∏≠ Spear ‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                    local args = {
                        "Flimsy Spear",
                        "Spear",
                        [4] = 1
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("purchase"):FireServer(unpack(args))
                end
            end
        end)
    end
end)

-- üß† ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô Backpack ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£
function EquipTool(toolName)
    local player = game.Players.LocalPlayer
    local char = player.Character or player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local tool = player.Backpack:FindFirstChild(toolName)

    if not humanoid then
        warn("[EquipTool] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Humanoid")
        return false
    end

    if not tool then
        warn("[EquipTool] ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ä‡∏∑‡πà‡∏≠ '" .. toolName .. "' ‡πÉ‡∏ô Backpack")
        return false
    end

    -- ‚úÖ ‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    humanoid:EquipTool(tool)

    -- ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Equip ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    task.wait(0.2)
    if char:FindFirstChild(toolName) then
        print("[EquipTool] ‚úÖ ‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:", toolName)
        return true
    else
        warn("[EquipTool] ‚ö†Ô∏è ‡πÄ‡∏Å‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á:", toolName)
        return false
    end
end


spawn(function()
    while task.wait(1) do
        pcall(function()
            if _G.Config.Equip then
				if not _G.Item and _G.Config.RodPriority then
					for _, rodName in ipairs(_G.Config.RodPriority) do
						if game:GetService("Players").LocalPlayer.Character:FindFirstChild(rodName) then
							_G.Item = rodName
							break
						end
					end
				end
                if game.Workspace.PlayerStats[game.Players.LocalPlayer.Name].T[game.Players.LocalPlayer.Name].Rods:FindFirstChild(_G.Item) and not game.Players.LocalPlayer.Backpack:FindFirstChild(_G.Item) then
                    game:GetService("ReplicatedStorage")
                        :WaitForChild("packages")
                        :WaitForChild("Net")
                        :WaitForChild("RF/Rod/Equip")
                        :InvokeServer(_G.Item)
                elseif game.Players.LocalPlayer.Backpack:FindFirstChild(_G.Item) then
                    EquipTool(_G.Item)
                end
            end
        end)
    end
end)

spawn(function()
	while task.wait(1) do
		pcall(function()
			if _G.Config.Autosell then
				backpack = game:GetService("Players").LocalPlayer.Backpack
				if #backpack:GetChildren() > 60 then
					_G.Config.Autofarm = false
                    _G.Config.Equip = false
					character = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
					hrp = character:WaitForChild("HumanoidRootPart")
					hrp.CFrame = CFrame.new(-2895, 136, -2184)

					task.wait(1)

					for i,v in pairs(A.fetch("Inventory")) do
						pcall(function()
							if B[v.name].Rarity and B[v.name].Rarity == "Special" then
								print("[üé£ ‡∏û‡∏ö‡∏õ‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©]:", v.name)
								game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2742, 160, -2075)
								backpackUI.handleInput(i, "equip")
								task.wait(0.1)
								args = {
									{
										voice = 12,
										idle = workspace.world.map["Lost Jungle"]["Merrick Merchant"].description.idle,
										npc = workspace.world.map["Lost Jungle"]["Merrick Merchant"]
									}
								}
								game:GetService("ReplicatedStorage").events.Sell:InvokeServer(unpack(args))
							end
						end)
					end

					-- ü™ô ‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
					args = {
						{
							voice = 12,
							idle = workspace.world.map["Lost Jungle"]["Merrick Merchant"].description.idle,
							npc = workspace.world.map["Lost Jungle"]["Merrick Merchant"]
						}
					}
					game:GetService("ReplicatedStorage").events.SellAll:InvokeServer(unpack(args))

					task.wait(3)
				elseif #backpack:GetChildren() < 60 then
					task.wait(10)
					_G.Config.Autofarm = true
                    _G.Config.Equip = true
				end
			end
		end)
	end
end)



local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- üß≠ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡∏ï‡∏Å‡∏õ‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö
local FishingSpots = {
    Default = CFrame.new(
        623.813354, 159.845306, -1870.30835,
        -0.755489171, -4.39211298e-08, 0.655161142,
        -1.04109494e-08, 1, 5.50334391e-08,
        -0.655161142, 3.47563187e-08, -0.755489171
    ),
    GreatRod = CFrame.new(
        1375.31616, -603.46405, 2337.57251,
        0.942536652, 5.14034149e-08, -0.33410278,
        -6.6218206e-08, 1, -3.29529435e-08,
        0.33410278, 5.31830437e-08, 0.942536652
    )
}

-- ü™ù ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏ô‡πÄ‡∏ö‡πá‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠
local function getEquippedRod()
    if not _G.Item and _G.Config and _G.Config.RodPriority then
        for _, rodName in ipairs(_G.Config.RodPriority) do
            if Character:FindFirstChild(rodName) then
                _G.Item = rodName
                return rodName
            end
        end
    end
    return _G.Item
end

-- üß© ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏¢‡∏ô‡πÄ‡∏ö‡πá‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
local function canCast(rod)
    return rod and not rod:FindFirstChild("bobber") and not PlayerGui:FindFirstChild("reel") and not PlayerGui:FindFirstChild("shakeui")
end

-- üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏¢‡∏ô‡πÄ‡∏ö‡πá‡∏î
local function castRod(rod, target)
    local hrp = Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local distance = (hrp.Position - target.Position).Magnitude

    if distance > 10 then
        hrp.CFrame = target
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ï‡∏Å‡∏õ‡∏•‡∏≤...")
        return
    end

    if canCast(rod) then
        hrp.CFrame = target
        rod.events.castAsync:InvokeServer(100, 1)
    end
end

-- ‚öôÔ∏è Loop ‡∏´‡∏•‡∏±‡∏Å
task.spawn(function()
    while task.wait(0.5) do
        pcall(function()
            if not _G.Config or not _G.Config.Autofarm then return end

            Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local rodName = getEquippedRod()
            if not rodName then return end

            local rod = Character:FindFirstChild(rodName)
            if not rod then return end

            -- üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏±‡∏ô‡πÄ‡∏ö‡πá‡∏î
            local spot = rodName == "Great Rod of Oscar" and FishingSpots.GreatRod or FishingSpots.Default
            castRod(rod, spot)
        end)
    end
end)
task.spawn(function()
    while task.wait(0.1) do
        pcall(function()
            if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("reel") then
                game:GetService("ReplicatedStorage").events.reelfinished:FireServer(100, true)
            end
        end)
    end
end)

local Players = game:GetService("Players")
local GuiService = game:GetService("GuiService")
local VirtualInputManager = game:GetService("VirtualInputManager")

local player = Players.LocalPlayer

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Selection
local function interact(path)
	if path then
		GuiService.SelectedObject = path
		task.wait(0.05)
		VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
		task.wait(0.05)
		VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
		task.wait(0.05)
		GuiService.SelectedObject = nil
	end
end

-- ‡∏ß‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
task.spawn(function()
	while task.wait(0.1) do
		pcall(function()
			local gui = player:FindFirstChild("PlayerGui")
			if not gui then return end

			local button = gui:FindFirstChild("shakeui")
				and gui.shakeui:FindFirstChild("safezone")
				and gui.shakeui.safezone:FindFirstChild("button")

			if button and button:IsA("GuiObject") and button.Visible then
				interact(button)
			end
		end)
	end
end)


local playerStats = workspace:WaitForChild("PlayerStats")
local playerName = game.Players.LocalPlayer.Name
local stats = playerStats[playerName]
local rods = stats.T[playerName]:WaitForChild("Rods")

local function getNumericValue()
    local value = tostring(game:GetService("Players").LocalPlayer.leaderstats["C$"].Value)
    local cleanValue = value:gsub(",", ""):gsub("C%$", "")
    return tonumber(cleanValue)
end


task.spawn(function()
	while task.wait(1) do
		pcall(function()
            if rods:FindFirstChild("Great Rod of Oscar").Value ~= "Clever" and getNumericValue() > 110000 and not game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Enchant Relic") then
                if not workspace:FindFirstChild(game:GetService("Players").LocalPlayer.Name):FindFirstChild("Enchant Relic") then
                    _G.Config.Autofarm = false
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1215, 195, -1040)
                    local merlin = workspace.world.npcs.Merlin.Merlin
                    local buy5Relics = merlin:FindFirstChild("buy10Relics")

                    if buy5Relics then
                        buy5Relics:InvokeServer({
                            {
                                voice = 11,
                                idle = workspace.world.npcs.Merlin.description.idle,
                                npc = workspace.world.npcs.Merlin
                            }
                        })
                    end
                end
            end
        end)
    end
end)

task.spawn(function()
	while task.wait(1) do
		pcall(function()
			local player = game:GetService("Players").LocalPlayer
			local char = player.Character or player.CharacterAdded:Wait()
			local backpack = player:WaitForChild("Backpack")
			local rods = rods -- assume this defined globally

			-- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
			if rods:FindFirstChild("Aurora Rod") 
				and rods["Aurora Rod"].Value ~= "Hasty"
				and getNumericValue() > 110000
				and not backpack:FindFirstChild("Enchant Relic")
				and not char:FindFirstChild("Enchant Relic") then
				
				_G.Config.Autofarm = false
				char:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-1215, 195, -1040)
				
				local merlin = workspace:WaitForChild("world").npcs.Merlin.Merlin
				local buyRelics = merlin:FindFirstChild("buy10Relics")
				
				if buyRelics then
					buyRelics:InvokeServer({
						{
							voice = 11,
							idle = merlin.description.idle,
							npc = merlin
						}
					})
				end
			end
		end)
	end
end)


task.spawn(function()
	while task.wait(1) do
		pcall(function()
            if rods:FindFirstChild("Great Rod of Oscar").Value ~= "Clever"
	and game:GetService("ReplicatedStorage").world.cycle.Value == "Night"
	and (game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Enchant Relic")
	or workspace:FindFirstChild(game:GetService("Players").LocalPlayer.Name):FindFirstChild("Enchant Relic")) then
                _G.Config.Autofarm = false
                _G.Config.Equip = false
                if not game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                    local vim = game:GetService("VirtualInputManager")
                    vim:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                    task.wait(0.05)
                    vim:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                    local player = game.Players.LocalPlayer
                    local char = player.Character or player.CharacterAdded:Wait()
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    local tool = player.Backpack:FindFirstChild("Enchant Relic")

                    if tool and humanoid then
                        humanoid:EquipTool(tool)
                    end
                    task.wait(0.3)
                elseif game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                interact(game:GetService("Players").LocalPlayer.PlayerGui.over.prompt.confirm)
                end
            else
                wait(10)
                _G.Config.Autofarm = true
                _G.Config.Equip = true
            end
        end)
    end
end)

task.spawn(function()
	while task.wait(1) do
		pcall(function()
            if rods:FindFirstChild("Aurora Rod").Value ~= "Hasty"
	and game:GetService("ReplicatedStorage").world.cycle.Value == "Night"
	and (game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Enchant Relic")
	or workspace:FindFirstChild(game:GetService("Players").LocalPlayer.Name):FindFirstChild("Enchant Relic")) then
                _G.Config.Autofarm = false
                _G.Config.Equip = false
                if not game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                    local vim = game:GetService("VirtualInputManager")
                    vim:SendKeyEvent(true, Enum.KeyCode.E, false, game)
                    task.wait(0.05)
                    vim:SendKeyEvent(false, Enum.KeyCode.E, false, game)
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                    local player = game.Players.LocalPlayer
                    local char = player.Character or player.CharacterAdded:Wait()
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    local tool = player.Backpack:FindFirstChild("Enchant Relic")

                    if tool and humanoid then
                        humanoid:EquipTool(tool)
                    end
                    task.wait(0.3)
                elseif game:GetService("Players").LocalPlayer.PlayerGui.over:FindFirstChild("prompt") then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1311, -802, -83)
                interact(game:GetService("Players").LocalPlayer.PlayerGui.over.prompt.confirm)
                end
            else
                wait(10)
                _G.Config.Autofarm = true
                _G.Config.Equip = true
            end
        end)
    end
end)
